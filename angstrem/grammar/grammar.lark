
main: _SP? ( stmt ( _SP? _DELIM _SP? stmt )* _SP? ( _DELIM _SP? )? )?

?stmt: decl
     | expr

?decl: decl__func

decl__func: "fn" _SP ID _SP? "(" _SP? func__args? ")" _SP? func__body

func__args: ID _SP? ( "," _SP? ID _SP? )*

func__body: expr

?expr: for
     | let
     | call
     | block
     | binary
     | assign
     | atom
     | comment
//     | group

binary: expr _SP? BINARY__OPERATOR _SP? expr

BINARY__OPERATOR: "&&"
                | "||"
                | "in"
                | "+"
                | "*"

call: ID _SP? "(" _SP? call__args? ")"

call__args: expr _SP? ( "," _SP? expr _SP? )*

// group: "(" _SP? ( expr _SP? )? ")"

let: "let" _SP? "(" _SP? ID _SP? "=" _SP? expr _SP? ")" _SP? expr

for: "for" _SP? "(" _SP? ID _SP "in" _SP expr _SP? ")" _SP? expr

block: "{" _SP? _block__body? "}"

_block__body: expr _SP? ( _DELIM _SP? expr _SP? )*

_DELIM: ";" | "\n"

comment: COMMENT__LINE
       | COMMENT__BLOCK

COMMENT__LINE:  "//" /[^\n]/*
COMMENT__BLOCK: /\/\*.*\*\//s

assign: ID _SP? "=" _SP? expr

?atom: NUMBER
     | ID

ID: /[A-Za-z]+/
  | "_"

NUMBER: /\d+/

_SP: /\s+/m
